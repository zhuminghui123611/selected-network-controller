{"version":3,"file":"SelectedNetworkMiddleware.mjs","sourceRoot":"","sources":["../src/SelectedNetworkMiddleware.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,oCAAoC,EAAE,wCAAoC;AAOnF,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAC7C,SAA6C,EACL,EAAE;IAC1C,MAAM,2BAA2B,GAAG,CAAC,MAAc,EAAE,EAAE,CACrD,SAAS,CAAC,IAAI,CACZ,oCAAoC,CAAC,2BAA2B,EAChE,MAAM,CACP,CAAC;IAEJ,OAAO,CAAC,GAA4C,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE;QAC/D,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QAED,GAAG,CAAC,eAAe,GAAG,2BAA2B,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC9D,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type { SelectedNetworkControllerMessenger } from './SelectedNetworkController';\nimport { SelectedNetworkControllerActionTypes } from './SelectedNetworkController';\n\nexport type SelectedNetworkMiddlewareJsonRpcRequest = JsonRpcRequest & {\n  networkClientId?: NetworkClientId;\n  origin?: string;\n};\n\nexport const createSelectedNetworkMiddleware = (\n  messenger: SelectedNetworkControllerMessenger,\n): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  const getNetworkClientIdForDomain = (origin: string) =>\n    messenger.call(\n      SelectedNetworkControllerActionTypes.getNetworkClientIdForDomain,\n      origin,\n    );\n\n  return (req: SelectedNetworkMiddlewareJsonRpcRequest, _, next) => {\n    if (!req.origin) {\n      throw new Error(\"Request object is lacking an 'origin'\");\n    }\n\n    req.networkClientId = getNetworkClientIdForDomain(req.origin);\n    return next();\n  };\n};\n"]}